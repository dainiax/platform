#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import csv
import os

from jinja2 import Environment

from tooling import ROOT


template = Environment().from_string(source='''
package uk.ac.wellcome.models

import com.fasterxml.jackson.annotation.JsonProperty

trait License {
  val licenseType: String
  val label: String
  val url: String
  @JsonProperty("type") val ontologyType: String = "License"
}

// ======================= AUTOGENERATED CODE STARTS ======================= //
//
// The code in this file is autogenerated.  You can rebuild it by running
// 'make autogen' from the root of the repo.  Edits to this file will be lost.
{% for lic in licenses %}
case object {{ lic.name }} extends License {
  val licenseType = "{{ lic.licenseType }}"
  val label = "{{ lic.label }}"
  val url = "{{ lic.url }}"
}
{% endfor %}
// ======================== AUTOGENERATED CODE ENDS ======================== //

''')


class License:

    def __init__(self, reader):
        self.reader = reader

    @property
    def name(self):
        return f"License_{self.reader['licenseType'].replace('-', '')}"

    @property
    def licenseType(self):
        return self.reader['licenseType']

    @property
    def label(self):
        return self.reader['label']

    @property
    def url(self):
        return self.reader['url']


# Directory containing reference data for autogen
REFERENCE_DATA = os.path.join(ROOT, 'ontologies', 'Reference data')

AUTOGEN_OUT = os.path.join(
    ROOT, 'common', 'src', 'main', 'scala', 'uk', 'ac', 'wellcome', 'autogen'
)
os.makedirs(AUTOGEN_OUT, exist_ok=True)


LICENSE_IN = os.path.join(REFERENCE_DATA, 'licenses.csv')
LICENSE_OUT = os.path.join(AUTOGEN_OUT, 'Licenses.scala')

with open(LICENSE_IN) as csvfile:
    reader = csv.DictReader(csvfile)
    l = []
    for row in reader:
        l.append(License(row))

    print(template.render(licenses=l))
